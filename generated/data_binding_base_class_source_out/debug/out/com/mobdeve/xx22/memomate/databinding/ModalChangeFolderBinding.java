// Generated by view binder compiler. Do not edit!
package com.mobdeve.xx22.memomate.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.mobdeve.xx22.memomate.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ModalChangeFolderBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final LinearLayout foldersLl;

  @NonNull
  public final RecyclerView foldersRl;

  @NonNull
  public final TextView moveFolderTv;

  private ModalChangeFolderBinding(@NonNull ConstraintLayout rootView,
      @NonNull LinearLayout foldersLl, @NonNull RecyclerView foldersRl,
      @NonNull TextView moveFolderTv) {
    this.rootView = rootView;
    this.foldersLl = foldersLl;
    this.foldersRl = foldersRl;
    this.moveFolderTv = moveFolderTv;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ModalChangeFolderBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ModalChangeFolderBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.modal_change_folder, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ModalChangeFolderBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.foldersLl;
      LinearLayout foldersLl = ViewBindings.findChildViewById(rootView, id);
      if (foldersLl == null) {
        break missingId;
      }

      id = R.id.foldersRl;
      RecyclerView foldersRl = ViewBindings.findChildViewById(rootView, id);
      if (foldersRl == null) {
        break missingId;
      }

      id = R.id.moveFolderTv;
      TextView moveFolderTv = ViewBindings.findChildViewById(rootView, id);
      if (moveFolderTv == null) {
        break missingId;
      }

      return new ModalChangeFolderBinding((ConstraintLayout) rootView, foldersLl, foldersRl,
          moveFolderTv);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
